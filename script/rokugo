#!perl
use strict;
use warnings;
use Caroline;
use Rokugo;
use Getopt::Long;
use Data::Dumper;
use Perl6::PVIP;

my $p = Getopt::Long::Parser->new(
    config => [qw(posix_default no_ignore_case auto_help)]
);
$p->getoptions(
    'e=s'       => \my $eval,
    'debug'     => \my $debug,
    'ast'       => \my $ast,
);

if (defined $eval) {
    my $compiler = Rokugo::Compiler->new();
    my $compiled = $compiler->compile($eval, '-e');
    if ($ast) {
        print "*** AST ***\n";
        print Perl6::PVIP->new->parse_string($eval)->as_sexp;
        print "\n*** /AST ***\n";
        print "\n\n";
    }
    print "------ Compiled code:\n$compiled\n---------------\n" if $debug;
    eval $compiled;
    die $@ if $@;
} elsif (@ARGV) {
    my $fname= shift @ARGV;
    my $compiler = Rokugo::Compiler->new();
    my $src = slurp($fname);
    if ($ast) {
        print "*** AST ***\n";
        print Perl6::PVIP->new->parse_string($src)->as_sexp;
        print "\n*** /AST ***\n";
        print "\n\n";
    }
    my $compiled = $compiler->compile($src, $fname);
    print "------ Compiled code:\n$compiled\n---------------\n" if $debug;
    eval $compiled;
    die $@ if $@;
} else {
    my $caroline = Caroline->new();
    while (defined(my $line = $caroline->readline('rokugo> '))) {
        if ($line =~ /\S/) {
            $caroline->history_add($line);
            my $compiler = Rokugo::Compiler->new();
            my $compiled = eval {
                $compiler->compile($line, '-e');
            };
            if ($@) {
                print STDERR $@ . "\n";
                next;
            }
            if ($ast) {
                print "AST: \n";
                print Perl6::PVIP->new->parse_string($eval)->as_sexp;
            }
            my $ret = eval $compiled;
            if ($@) {
                print STDERR $@ . "\n";
            } else {
                warn Dumper($ret);
            }
        }
    }
}

sub slurp {
    my $fname = shift;
    open my $fh, '<', $fname
        or Carp::croak("Can't open '$fname' for reading: '$!'");
    scalar(do { local $/; <$fh> })
}

